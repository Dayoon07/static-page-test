-- 사용자 테이블
CREATE TABLE SHORTFORM_USERS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    USERNAME VARCHAR2(200) NOT NULL UNIQUE,
    MAIL VARCHAR2(200) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(200) NOT NULL,
    PROFILE_IMG CLOB NOT NULL,  -- 프로필 파일 이미지 이름
    PROFILE_IMG_SRC CLOB NOT NULL,  -- 프로필 파일 이미지 경로
    BIO CLOB,   -- 자기소개말
    MENTION VARCHAR2(300) NOT NULL UNIQUE,
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 팔로우 관계 테이블
CREATE TABLE SHORTFORM_USERS_FOLLOWS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    FOLLOW_USER_ID NUMBER NOT NULL, -- 팔로우한(요청한) 유저의 ID 
    FOLLOWED_USER_ID NUMBER NOT NULL,  -- 팔로우된(상대방) 유저의 ID
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_FOLLOW_USER FOREIGN KEY (FOLLOW_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_FOLLOWED_USER FOREIGN KEY (FOLLOWED_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT UC_FOLLOW UNIQUE (FOLLOW_USER_ID, FOLLOWED_USER_ID),    -- 2개의 필드를 묶어서 하나의 필드로 보는 거임
    CONSTRAINT CK_NOT_SELF_FOLLOW CHECK (FOLLOW_USER_ID != FOLLOWED_USER_ID)   -- 자기 자신을 팔로우 못함
);

-- 비디오 테이블
CREATE TABLE SHORTFORM_VIDEOS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    VIDEO_TITLE VARCHAR2(200) NOT NULL,
    VIDEO_DESCRIPTION CLOB, -- 설명란
    VIDEO_NAME VARCHAR2(1000) NOT NULL,
    VIDEO_SRC VARCHAR2(1000) NOT NULL,    -- 영상 경로
    VIDEO_TAG VARCHAR2(500),    -- 해시태크
    VIDEO_VIEWS NUMBER DEFAULT 0,   -- 조회수
    VIDEO_LOC VARCHAR2(500) NOT NULL UNIQUE,
    UPLOADER_USER_ID NUMBER NOT NULL,   -- 업로드한 유저의 아이디
    VIDEO_WATCH_AVAILABILITY VARCHAR2(50) NOT NULL CHECK (VIDEO_WATCH_AVAILABILITY IN ('public', 'followers', 'private')),
    COMMENT_AVAILABILITY VARCHAR2(50) NOT NULL CHECK (COMMENT_AVAILABILITY IN ('public', 'followers', 'private')),
    UPLOAD_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_UPLOADER FOREIGN KEY (UPLOADER_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE
);

-- 좋아요 테이블
CREATE TABLE SHORTFORM_VIDEO_LIKES (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    LIKE_VIDEO_ID NUMBER NOT NULL,  -- 좋아요를 누른 영상의 아이디
    LIKER_USER_ID NUMBER NOT NULL,  -- 좋아요를 누른 유저의 아이디
    LIKE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_LIKE_VIDEO FOREIGN KEY (LIKE_VIDEO_ID) REFERENCES SHORTFORM_VIDEOS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_LIKER_USER FOREIGN KEY (LIKER_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT UC_VIDEO_LIKE UNIQUE (LIKE_VIDEO_ID, LIKER_USER_ID)
);

-- 댓글 테이블
CREATE TABLE SHORTFORM_COMMENTS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    COMMENT_TEXT CLOB NOT NULL,
    COMMENT_USER_ID NUMBER NOT NULL,    -- 댓글을 작성한 유저의 아이디
    COMMENT_VIDEO_ID NUMBER NOT NULL,   -- 댓글을 작성한 영상의 아이디
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_COMMENT_USER FOREIGN KEY (COMMENT_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_COMMENT_VIDEO FOREIGN KEY (COMMENT_VIDEO_ID) REFERENCES SHORTFORM_VIDEOS(ID) ON DELETE CASCADE 
);

-- 댓글 좋아요 테이블
CREATE TABLE SHORTFORM_COMMENT_LIKES (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    COMMENT_ID NUMBER NOT NULL, -- 댓글의 아이디
    LIKER_USER_ID NUMBER NOT NULL,  -- 댓글에 좋아요를 누른 유저의 아이디
    LIKE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_COMMENT_LIKE_COMMENT FOREIGN KEY (COMMENT_ID) REFERENCES SHORTFORM_COMMENTS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_COMMENT_LIKE_USER FOREIGN KEY (LIKER_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT UC_COMMENT_LIKE UNIQUE (COMMENT_ID, LIKER_USER_ID)
);

-- 대댓글 테이블
CREATE TABLE SHORTFORM_COMMENT_REPLYS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    COMMENT_REPLY_TEXT CLOB NOT NULL,   -- 대댓글
    COMMENT_REPLY_USER_ID NUMBER NOT NULL,  -- 대댓글을 작성한 유저의 아이디
    COMMENT_REPLY_ID NUMBER NOT NULL,  -- 대댓글을 작성할 댓글의 아이디
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_REPLY_USER FOREIGN KEY (COMMENT_REPLY_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_REPLY_COMMENT FOREIGN KEY (COMMENT_REPLY_ID) REFERENCES SHORTFORM_COMMENTS(ID) ON DELETE CASCADE
);

-- 대댓글 좋아요 테이블
CREATE TABLE SHORTFORM_REPLY_LIKES (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    REPLY_ID NUMBER NOT NULL,   -- 대댓글 아이디
    LIKER_USER_ID NUMBER NOT NULL,  -- 좋아요를 누른 유저의 아이디
    LIKE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_REPLY_LIKE_REPLY FOREIGN KEY (REPLY_ID) REFERENCES SHORTFORM_COMMENT_REPLYS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_REPLY_LIKE_USER FOREIGN KEY (LIKER_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE,
    CONSTRAINT UC_REPLY_LIKE UNIQUE (REPLY_ID, LIKER_USER_ID)
);

-- 검색 기록 테이블
CREATE TABLE SHORTFORM_SEARCH_LISTS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    SEARCHED_USER_ID NUMBER,    -- 검색한 유저의 아이디 (비로그인 시 검색어만 삽입)
    SEARCHED_WORD VARCHAR2(500) NOT NULL,    -- 검색어
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_SEARCHED_USER_ID FOREIGN KEY (SEARCHED_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE SET NULL
);

-- 시청 기록 테이블
CREATE TABLE SHORTFORM_VIEWSTORYS (
    ID NUMBER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1 NOCACHE) PRIMARY KEY,
    WATCHED_VIDEO_ID NUMBER NOT NULL,   -- 시청한 영상의 아이디
    WATCHED_USER_ID NUMBER NOT NULL,    -- 시청한 유저의 아이디 (비로그인 시 시청 기록은 아예 삽입 안함)
    CREATE_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_WATCHED_VIDEO FOREIGN KEY (WATCHED_VIDEO_ID) REFERENCES SHORTFORM_VIDEOS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_WATCHED_USER FOREIGN KEY (WATCHED_USER_ID) REFERENCES SHORTFORM_USERS(ID) ON DELETE CASCADE
);

-- 성능 향상을 위한 인덱스
CREATE INDEX IDX_VIDEOS_UPLOADER ON SHORTFORM_VIDEOS(UPLOADER_USER_ID);
CREATE INDEX IDX_VIDEOS_UPLOAD_AT ON SHORTFORM_VIDEOS(UPLOAD_AT);
CREATE INDEX IDX_COMMENTS_VIDEO ON SHORTFORM_COMMENTS(COMMENT_VIDEO_ID);
CREATE INDEX IDX_FOLLOWS_FOLLOWING ON SHORTFORM_USERS_FOLLOWS(FOLLOWED_USER_ID);
CREATE INDEX IDX_VIDEO_LIKES_VIDEO ON SHORTFORM_VIDEO_LIKES(LIKE_VIDEO_ID);
CREATE INDEX IDX_VIEWSTORYS_USER ON SHORTFORM_VIEWSTORYS(WATCHED_USER_ID);
CREATE INDEX IDX_VIEWSTORYS_VIDEO ON SHORTFORM_VIEWSTORYS(WATCHED_VIDEO_ID);

SELECT * FROM DBA_INDEXES WHERE INDEX_NAME LIKE '%' || 'IDX_' || '%' AND OWNER = 'SYSTEM';
SELECT * FROM USER_INDEXES WHERE INDEX_NAME LIKE '%IDX%';

SELECT * FROM SHORTFORM_USERS ORDER BY ID DESC;
SELECT * FROM SHORTFORM_USERS_FOLLOWS ORDER BY ID DESC;
SELECT * FROM SHORTFORM_VIDEOS ORDER BY ID DESC;
SELECT * FROM SHORTFORM_VIDEO_LIKES ORDER BY ID DESC;
SELECT * FROM SHORTFORM_COMMENTS ORDER BY ID DESC;
SELECT * FROM SHORTFORM_COMMENT_LIKES ORDER BY ID DESC;
SELECT * FROM SHORTFORM_COMMENT_REPLYS ORDER BY ID DESC;
SELECT * FROM SHORTFORM_REPLY_LIKES ORDER BY ID DESC;
SELECT * FROM SHORTFORM_SEARCH_LISTS ORDER BY ID DESC;
SELECT * FROM SHORTFORM_VIEWSTORYS ORDER BY ID DESC;

SELECT (SELECT COUNT(*) FROM SHORTFORM_USERS)
    + (SELECT COUNT(*) FROM SHORTFORM_USERS_FOLLOWS) 
    + (SELECT COUNT(*) FROM SHORTFORM_VIDEOS) 
    + (SELECT COUNT(*) FROM SHORTFORM_VIDEO_LIKES) 
    + (SELECT COUNT(*) FROM SHORTFORM_COMMENTS) 
    + (SELECT COUNT(*) FROM SHORTFORM_COMMENT_LIKES) 
    + (SELECT COUNT(*) FROM SHORTFORM_COMMENT_REPLYS) 
    + (SELECT COUNT(*) FROM SHORTFORM_REPLY_LIKES) 
    + (SELECT COUNT(*) FROM SHORTFORM_SEARCH_LISTS) 
    + (SELECT COUNT(*) FROM SHORTFORM_VIEWSTORYS) AS CNT    
FROM DUAL;

SELECT * FROM TAB;

PURGE RECYCLEBIN;
